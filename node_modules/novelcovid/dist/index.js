"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
const json = (res) => res.json();
class NovelCovid {
    constructor() {
        this.baseURL = 'https://disease.sh/v2';
    }
    /**
     * @description Gets all the information from the api.
     * @param {?yesterdayOptions} options - Options for All.
     * @returns {Promise<All>}
     */
    async all(options) {
        if (options) {
            if (options.yesterday) {
                return node_fetch_1.default(`${this.baseURL}/all?yesterday=${options.yesterday}`).then(json);
            }
        }
        return node_fetch_1.default(`${this.baseURL}/all`).then(json);
    }
    /**
     * @description Gets all the affected country names.
     * @returns {Promise<Array<string>>}
     */
    async countryNames() {
        return (await this.countries()).map(x => x.country);
    }
    async countries(country, options) {
        if (country && !options) {
            return node_fetch_1.default(`${this.baseURL}/countries/${country}`).then(json);
        }
        else if (!country && options) {
            if (options.sort && !options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/countries?sort=${options.sort}`).then(json);
            }
            else if (options.sort && options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/countries?yesterday=${options.yesterday}&sort=${options.sort}`).then(json);
            }
            else if (!options.sort && options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/countries?yesterday=${options.yesterday}`).then(json);
            }
        }
        else if (country && options) {
            if (!options.sort && options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/countries/${country}?yesterday=${options.yesterday}`).then(json);
            }
            else if (!options.sort && options.yesterday && options.strict) {
                return node_fetch_1.default(`${this.baseURL}/countries/${country}?yesterday=${options.yesterday}&strict=${options.strict}`).then(json);
            }
            else if (!options.sort && !options.yesterday && options.strict) {
                return node_fetch_1.default(`${this.baseURL}.countries/${country}?strict=${options.strict}`).then(json);
            }
        }
        return node_fetch_1.default(`${this.baseURL}/countries`).then(json);
    }
    async states(state, options) {
        if (state && !options) {
            return node_fetch_1.default(`${this.baseURL}/states/${state}`).then(json);
        }
        else if (!state && options) {
            if (options.sort && !options.yesterday) {
                return node_fetch_1.default(`${this.baseURL}/states?sort=${options.sort}`).then(json);
            }
            else if (!options.sort && options.yesterday) {
                return node_fetch_1.default(`${this.baseURL}/states?yesterday=${options.yesterday}`).then(json);
            }
            return node_fetch_1.default(`${this.baseURL}/states?sort=${options.sort}&yesterday=${options.yesterday}`).then(json);
        }
        else if (state && options) {
            if (options.yesterday && !options.sort) {
                return node_fetch_1.default(`${this.baseURL}/states/${state}?yesterday=${options.yesterday}`).then(json);
            }
        }
        return node_fetch_1.default(`${this.baseURL}/states`).then(json);
    }
    async continents(continent, options) {
        if (continent && !options) {
            return node_fetch_1.default(`${this.baseURL}/continents/${continent}`).then(json);
        }
        else if (!continent && options) {
            if (options.sort && !options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/continents?sort=${options.sort}`).then(json);
            }
            else if (!options.sort && options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/continents?yesterday=${options.yesterday}`).then(json);
            }
            return node_fetch_1.default(`${this.baseURL}/continents?sort=${options.sort}&yesterday=${options.yesterday}`).then(json);
        }
        else if (continent && options) {
            if (!options.sort && options.yesterday && !options.strict) {
                return node_fetch_1.default(`${this.baseURL}/continents/${continent}?yesterday=${options.yesterday}`).then(json);
            }
            else if (!options.sort && options.yesterday && options.strict) {
                return node_fetch_1.default(`${this.baseURL}/continents/${continent}?yesterday=${options.yesterday}&strict=${options.strict}`).then(json);
            }
            else if (!options.sort && !options.yesterday && options.strict) {
                return node_fetch_1.default(`${this.baseURL}/continents/${continent}?strict=${options.strict}`).then(json);
            }
        }
        return node_fetch_1.default(`${this.baseURL}/continents`).then(json);
    }
    async historicalUSA(state) {
        if (state) {
            return node_fetch_1.default(`${this.baseURL}/historical/usacounties/${state}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/historical/usacounties`).then(json);
    }
    async historical(all, country, province) {
        if (country && !province && !all) {
            return node_fetch_1.default(`${this.baseURL}/historical/${country}`).then(json);
        }
        else if (country && province && !all) {
            return node_fetch_1.default(`${this.baseURL}/historical/${country}/${province}`).then(json);
        }
        else if (all) {
            return node_fetch_1.default(`${this.baseURL}/historical/all`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/historical`).then(json);
    }
    async jhucsse(counties, countyname) {
        if (counties && !countyname) {
            return node_fetch_1.default(`${this.baseURL}/jhucsse/counties`).then(json);
        }
        else if (counties && countyname) {
            return node_fetch_1.default(`${this.baseURL}/jhucsse/counties/${countyname}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/jhucsse`).then(json);
    }
    async nytState(state) {
        if (state) {
            return node_fetch_1.default(`${this.baseURL}/nyt/states/${state}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/nyt/states`).then(json);
    }
    async nytCounties(county) {
        if (county) {
            return node_fetch_1.default(`${this.baseURL}/nyt/counties/${county}`).then(json);
        }
        return node_fetch_1.default(`${this.baseURL}/nyt/counties`).then(json);
    }
    /**
     * @description - Return all NYT US nationwide data. Each entry returned represents data for a given day.
     * @returns {Promise<Array<NytUSA>>}
     */
    async nytUSA() {
        return node_fetch_1.default(`${this.baseURL}/nyt/usa`).then(json);
    }
}
exports.NovelCovid = NovelCovid;
exports.default = NovelCovid;
