export declare class NovelCovid {
    baseURL: string;
    constructor();
    /**
     * @description Gets all the information from the api.
     * @param {?yesterdayOptions} options - Options for All.
     * @returns {Promise<All>}
     */
    all(options?: AllOptions): Promise<All>;
    /**
     * @description Gets all the affected country names.
     * @returns {Promise<Array<string>>}
     */
    countryNames(): Promise<Array<string>>;
    /**
     * @description Fetches data of corona virus by country.
     * @param {?string} [country=null] - Country details you want to fetch.
     * @param {CountryOptions} options - options for country.
     * @returns {Promise<Array<Country>| Country>}
     */
    countries(): Promise<Array<Country>>;
    countries(country?: string | number): Promise<Array<Country> | Country>;
    countries(country?: string | null, options?: CountryOptions): Promise<Array<Country> | Country>;
    /**
     * @param {?string|null} state - For a state in US.
     * @param {?StateOptions} options - options for State.
     * @returns {Promise<Array<State>>}
     */
    states(): Promise<Array<State>>;
    states(state?: string | null, options?: StateOptions): Promise<Array<State> | State>;
    /**
     * @description Shows information as per continent.
     * @param {?string} continent - For a continent.
     * @param {?ContinentOptions} options - Options for continent.
     * @returns {Promise<Array<Continent> | Continent | ContinentE>}
     */
    continents(): Promise<Array<Continent>>;
    continents(continent: string | null): Promise<ContinentE>;
    continents(continent?: string | null, options?: ContinentOptions): Promise<Array<Continent> | Continent>;
    /**
     * @description - Get historical data of USA.
     * @param {?string} state - For a specfic state.
     * @returns {Promise<Array<string> | Array<HistoricalUSA>>}
     */
    historicalUSA(): Promise<Array<string>>;
    historicalUSA(state: string): Promise<Array<HistoricalUSA>>;
    /**
     * @description Get historical data from the start of 2020. (JHU CSSE GISand Data).
     * @param {?boolean} [all=null] - Returns  all the cases and deaths.
     * @param {?string} [country=null] -  Returns data of a specific country.
     * @param {?string} [province=null] - Get a province within a country's time series.
     * @returns {Promise<Array<Historical> | HistoricalAll | HistoricalCountry | Array<HistoricalCountry>>}
     */
    historical(): Promise<Array<Historical>>;
    historical(all?: boolean | null): Promise<HistoricalAll>;
    historical(all: null, country: string | null, province?: string | null): Promise<HistoricalCountry | Array<HistoricalCountry>>;
    /**
     * @description Return data from the John Hopkins CSSE Data Repository (Provinces and such).
     * @param {?boolean} [countries=null] - If method should return counties
     * @param {?string} countryname - for a specific County.
     * @returns {Promise<Array<Jhucsse> | Array<JhucsseCounties>>}
     */
    jhucsse(): Promise<Array<Jhucsse>>;
    jhucsse(counties?: boolean | null, countyname?: string | null): Promise<Array<JhucsseCounties>>;
    /**
     * @description - Return all NYT state data or individual state data if specified. Each entry returned represents data for a given day.
     * @param {?string} state - Specfic State.
     * @returns {Promise<Array<NytState>>}
     */
    nytState(state?: string): Promise<Array<NytState>>;
    /**
     * @description - Return all NYT county data or individual county data if specified. Each entry returned represents data for a given day.
     * @param {?string} county - Specfic county.
     * @returns {Promise<Array<NytCounties>>}
     */
    nytCounties(county?: string): Promise<Array<NytCounties>>;
    /**
     * @description - Return all NYT US nationwide data. Each entry returned represents data for a given day.
     * @returns {Promise<Array<NytUSA>>}
     */
    nytUSA(): Promise<Array<NytUSA>>;
}
export interface NytUSA {
    date: string;
    cases: number;
    deaths: number;
}
export interface NytCounties {
    date: string;
    county: string | null;
    state: string;
    fips: number;
    cases: number;
    deaths: number;
}
export interface NytState {
    date: string;
    state: string;
    fips: number;
    cases: number;
    deaths: number;
}
export interface All {
    updated: number;
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
    tests: number;
    testsPerOneMillion: number;
    continent: string;
    affectedCountries: number;
}
export interface Country {
    updated: number;
    country: string;
    countryInfo: {
        _id: number;
        iso3: string;
        iso2: string;
        lat: number;
        long: number;
        flag: string;
    };
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    recovered: number;
    active: number;
    critical: number;
    casesPerOneMillion: number;
    deathsPerOneMillion: number;
    tests: number;
    testsPerOneMillion: number;
    continent: string;
}
export interface State {
    state: string;
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    active: number;
    tests: number;
    testsPerOneMillion: number;
}
export interface Historical {
    country: string;
    province: string | null;
    timeline: Stats<object>;
}
export interface HistoricalCountry {
    country: string;
    provinces: string[] | null;
    timeline: Stats<object>;
}
export interface Jhucsse {
    country: string;
    province: Array<string> | string | null;
    updatedAt: string;
    stats: JhucsseStats<number>;
    coordinates: {
        latitude: string;
        longitude: string;
    };
}
export interface JhucsseCounties {
    country: string;
    province: string | null;
    updatedAt: string;
    county: string;
    stats: JhucsseStats<number>;
    coordinates: {
        latitude: string;
        longitude: string;
    };
}
export interface Continent {
    updated: number;
    cases: number;
    todayCases: number;
    deaths: number;
    todayDeaths: number;
    recovered: number;
    active: number;
    critical: number;
    continent: string;
}
export interface ContinentE extends Continent {
    countries: Array<string>;
}
export interface HistoricalAll extends Stats<object> {
}
export interface HistoricalUSA {
    province: string;
    country: null;
    timeline: Stat<object>;
}
export interface Stat<T> {
    cases: T;
    deaths: T;
}
export interface Stats<T> extends Stat<T> {
    recovered: T;
}
export interface JhucsseStats<T> {
    confirmed: T;
    deaths: T;
    recovered: T;
}
export interface AllOptions {
    yesterday?: yesterday;
}
export interface CountryOptions extends AllOptions {
    sort?: CountrySort;
    strict?: boolean;
}
export interface StateOptions extends AllOptions {
    sort?: Sort;
}
export interface ContinentOptions extends AllOptions {
    sort?: CountrySort;
    strict?: boolean;
}
export declare type Sort = 'cases' | 'todayCases' | 'deaths' | 'todayDeaths' | 'active';
export declare type CountrySort = Sort | 'recovered' | 'critical' | 'casesPerOneMillion' | 'deathsPerOneMillion';
export declare type yesterday = boolean | 1 | 0;
export default NovelCovid;
